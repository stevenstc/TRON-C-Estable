{"version":3,"sources":["utils/index.js","components/Contract/index.js","cons.js","components/CrowdFunding/index.js","components/Datos/index.js","components/Oficina/index.js","components/TronLinkInfo/index.js","components/TronLinkGuide/index.js","components/App/index.js","index.js","components/TronLinkGuide/TronLinkLogo.png"],"names":["utils","tronWeb","contract","setTronWeb","this","setContract","contractAddress","at","EarnTron","Component","constructor","props","super","state","texto","registrado","deposit","bind","estado","componentDidMount","Utils","window","setInterval","trx","getAccount","account","accountAddress","address","fromHex","investors","call","registered","setState","document","getElementById","value","amount","send","shouldPollResponse","callValue","loc","location","href","indexOf","getString","split","GET","get","i","l","length","tmp","unescape","decodeURI","inversors","console","log","exist","cons","sponsor","miRegistro","render","className","type","id","placeholder","onClick","totalInvestors","totalInvested","totalRefRewards","setstate","esto","parseInt","Investors","_hex","Invested","RefRewards","direccion","link","balanceRef","totalRef","invested","paidAt","my","withdrawn","Link","withdraw","mydireccion","MYwithdrawable","My","style","text","TronLinkInfo","accountBalance","accountBandwidth","fetchAccountAddress","fetchAccountBalance","fetchAccountBandwidth","accountAddressInBase58","getBalance","balanceInSun","balanceInTRX","fromSun","getBandwidth","WEBSTORE_URL","logo","src","TronLinkLogo","alt","openTronLink","open","TronLinkGuide","installed","target","rel","App","loggedIn","Promise","resolve","tronWebState","ready","tries","timer","TronWeb","clearInterval","defaultAddress","hex","toHex","base58","on","root","ReactDOM","module","exports"],"mappings":"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","file":"static/js/main.fb26829e.chunk.js","sourcesContent":["const utils = {\r\n  tronWeb: false,\r\n  contract: false,\r\n\r\n  setTronWeb(tronWeb) {\r\n    this.tronWeb = tronWeb;\r\n  },\r\n\r\n  async setContract(tronWeb, contractAddress) {\r\n    this.contract = await tronWeb.contract().at(contractAddress);\r\n  }\r\n};\r\n\r\nexport default utils;\r\n","\r\n/// La direccion de su contrato ac√° ///////////////////////////////////\r\nconst contractAddress = \"TMwXjpcD7c88hfVuAaSbYUBZhS5QZaaMtb\";\r\n\r\nexport default contractAddress;","const proxy = \"https://proxy-ewozx.herokuapp.com/\";\r\nconst PRU = \"shasta.\";// shasta1. para inhabilitar red de pruebas\r\nconst WS = \"T9yD14Nj9j7xAB4dbGeiX9h8unkKHxuWwb\";//T9yD14Nj9j7xAB4dbGeiX9h8unkKHxuWwb recibe los huerfanos por defecto\r\n\r\n\r\nconst SC = \"TADc57WmRcE3WWG7arhupLBfNQzpDwRrfy\";// direccion del contrato\r\nconst USD = 1; // minimo de inversion en dolares USD (100) \r\n\r\nconst EX = \"TB7RTxBPY4eMvKjceXj8SWjVnZCrWr4XvF\"; //wallet de of exchange\r\n\r\n\r\n\r\nexport default {proxy, PRU, WS,  SC, USD, EX};","import React, { Component } from \"react\";\r\nimport Utils from \"../../utils\";\r\nimport contractAddress from \"../Contract\";\r\n\r\nimport cons from \"../../cons.js\";\r\n\r\nexport default class EarnTron extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      texto: \"Click to register\",\r\n      registrado: false\r\n  \r\n\r\n    };\r\n\r\n    this.deposit = this.deposit.bind(this);\r\n    this.estado = this.estado.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await Utils.setContract(window.tronWeb, contractAddress);\r\n    this.estado();\r\n    setInterval(() => this.estado(),3*1000);\r\n  };\r\n\r\n  async estado(){\r\n\r\n    const account =  await window.tronWeb.trx.getAccount();\r\n    var accountAddress = account.address;\r\n    accountAddress = window.tronWeb.address.fromHex(accountAddress);\r\n    var investors = await Utils.contract.investors(accountAddress).call();\r\n\r\n    if (!investors.registered) {\r\n      document.getElementById(\"amount\").value = \"\";\r\n      this.setState({\r\n        texto:\"Click to register\",\r\n        registrado: false\r\n      });\r\n    }else{\r\n\r\n      this.setState({\r\n        texto:\"Invest\",\r\n        registrado: true\r\n      });\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n  async deposit() {\r\n\r\n    const {registrado} = this.state;\r\n\r\n\r\n    var amount = document.getElementById(\"amount\").value;\r\n\r\n\r\n    if (registrado) {\r\n\r\n      await Utils.contract.deposit().send({\r\n        shouldPollResponse: true,\r\n        callValue: amount * 1000000 // converted to SUN\r\n      });\r\n\r\n      document.getElementById(\"amount\").value = \"\";\r\n\r\n    }else{\r\n\r\n      var loc = document.location.href;\r\n      if(loc.indexOf('?')>0){\r\n          var getString = loc.split('?')[1];\r\n          var GET = getString.split('&');\r\n          var get = {};\r\n          for(var i = 0, l = GET.length; i < l; i++){\r\n              var tmp = GET[i].split('=');\r\n              get[tmp[0]] = unescape(decodeURI(tmp[1]));\r\n          }\r\n          \r\n          if (get['ref']) {\r\n            tmp = get['ref'].split('#');\r\n            var inversors = await Utils.contract.investors(tmp[0]).call();\r\n            console.log(inversors);\r\n            if ( inversors.registered && inversors.exist ) {\r\n              document.getElementById('sponsor').value = tmp[0]; \r\n            }else{\r\n              document.getElementById('sponsor').value = cons.WS;         \r\n            }\r\n          }else{\r\n             document.getElementById('sponsor').value = cons.WS;\r\n          }\r\n             \r\n      }else{\r\n        \r\n          document.getElementById('sponsor').value = cons.WS; \r\n      }\r\n\r\n      let sponsor = document.getElementById(\"sponsor\").value;\r\n\r\n      document.getElementById(\"amount\").value = \"\";\r\n\r\n      await Utils.contract.miRegistro(sponsor).send();\r\n\r\n    }\r\n\r\n    ///// cambiar deposito por egistro en la pagina\r\n\r\n    \r\n  };\r\n\r\n  render() {\r\n\r\n    var {texto} = this.state;\r\n    \r\n    return (\r\n      \r\n\r\n        <div>\r\n          <h6 className=\"text-center\">\r\n            Return: <strong>200%</strong><br />\r\n            <strong>2%</strong> per day<br /><br />\r\n          </h6>\r\n\r\n          <div className=\"form-group text-center\">\r\n            <input type=\"text\" className=\"form-control mb-20 text-center\" id=\"amount\" placeholder=\"Min. 200 TRX\"></input>\r\n            <p className=\"card-text\">You must have ~ 50 TRX to make the transaction</p>\r\n            <button type=\"button\" className=\"primary-btn header-btn text-uppercase mb-20 text-center\" onClick={() => this.deposit()}>{texto}</button>\r\n          </div>\r\n          \r\n        </div>\r\n      \r\n\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Utils from \"../../utils\";\r\nimport contractAddress from \"../Contract\";\r\n\r\nexport default class EarnTron extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      totalInvestors: 0,\r\n      totalInvested: 0,\r\n      totalRefRewards: 0\r\n    };\r\n\r\n    this.totalInvestors = this.totalInvestors.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await Utils.setContract(window.tronWeb, contractAddress);\r\n    setInterval(() => this.totalInvestors(),1000);\r\n  };\r\n\r\n  async totalInvestors() {\r\n\r\n    let esto = await Utils.contract.setstate().call();\r\n    //console.log(esto);\r\n    this.setState({\r\n      totalInvestors: parseInt(esto.Investors._hex),\r\n      totalInvested: parseInt(esto.Invested._hex)/1000000,\r\n      totalRefRewards: parseInt(esto.RefRewards._hex)/1000000\r\n\r\n    });\r\n\r\n  };\r\n\r\n  render() {\r\n    const { totalInvestors, totalInvested, totalRefRewards } = this.state;\r\n\r\n    return (\r\n      <section className=\"section-gap aboutus-area\">\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-lg-4 single-services\">\r\n              <h1 className=\"pt-40 pb-30 text-white\">{totalInvestors}</h1>\r\n              <p>\r\n                Global Investors\r\n              </p>\r\n            </div>\r\n            <div className=\"col-lg-4 single-services\">\r\n              \r\n              <h1 className=\"pt-40 pb-30 text-white\">{totalInvested} TRX</h1>\r\n              <p>\r\n                Global Inverted\r\n              </p>\r\n            </div>\r\n            <div className=\"col-lg-4 single-services\">\r\n              <h1 className=\"pt-40 pb-30 text-white\">{totalRefRewards} TRX</h1>\r\n              <p>\r\n                Global Referral Rewards\r\n              </p>\r\n            </div>                        \r\n          </div>\r\n        </div>    \r\n      </section>\r\n\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard';\r\nimport Utils from \"../../utils\";\r\nimport contractAddress from \"../Contract\";\r\n\r\nexport default class EarnTron extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      direccion: \"\",\r\n      link: \"Haz una inversi√≥n para obtener el LINK de referido\",\r\n      registered: false,\r\n      balanceRef: 0,\r\n      totalRef: 0,\r\n      invested: 0,\r\n      paidAt: 0,\r\n      my: 0,\r\n      withdrawn: 0\r\n\r\n    };\r\n\r\n    this.Investors = this.Investors.bind(this);\r\n    this.Link = this.Link.bind(this);\r\n    this.withdraw = this.withdraw.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await Utils.setContract(window.tronWeb, contractAddress);\r\n    setInterval(() => this.Investors(),1000);\r\n    setInterval(() => this.Link(),1000);\r\n  };\r\n\r\n  async Link() {\r\n    const {registered} = this.state;\r\n    if(registered){\r\n\r\n      let loc = document.location.href;\r\n      if(loc.indexOf('?')>0){\r\n        loc = loc.split('?')[0]\r\n      }\r\n      let mydireccion = await window.tronWeb.trx.getAccount();\r\n      mydireccion = window.tronWeb.address.fromHex(mydireccion.address)\r\n      mydireccion = loc+'?ref='+mydireccion;\r\n      this.setState({\r\n        link: mydireccion,\r\n      });\r\n    }else{\r\n      this.setState({\r\n        link: \"Haz una inversi√≥n para obtener el LINK de referido\",\r\n      });\r\n    }\r\n  }\r\n    \r\n\r\n  async Investors() {\r\n\r\n    let direccion = await window.tronWeb.trx.getAccount();\r\n    let esto = await Utils.contract.investors(direccion.address).call();\r\n    let My = await Utils.contract.MYwithdrawable().call();\r\n    //console.log(esto);\r\n    //console.log(My);\r\n    this.setState({\r\n      direccion: window.tronWeb.address.fromHex(direccion.address),\r\n      registered: esto.registered,\r\n      balanceRef: parseInt(esto.balanceRef._hex)/1000000,\r\n      totalRef: parseInt(esto.totalRef._hex)/1000000,\r\n      invested: parseInt(esto.invested._hex)/1000000,\r\n      paidAt: parseInt(esto.paidAt._hex)/1000000,\r\n      my: parseInt(My.amount._hex)/1000000,\r\n      withdrawn: parseInt(esto.withdrawn._hex)/1000000\r\n    });\r\n\r\n  };\r\n\r\n  async withdraw(){\r\n    await Utils.contract.withdraw().send()\r\n  };\r\n\r\n\r\n  render() {\r\n    const { balanceRef, totalRef, invested,  withdrawn , my, direccion, link} = this.state;\r\n\r\n    return (\r\n\r\n      <section className=\"simple-services-area section-gap\">\r\n        <div className=\"container\">\r\n          <header style={{'text-align': 'center'}} className=\"section-header\">\r\n            <h3 className=\"white\"><span style={{'font-weight': 'bold'}}>\r\n              My office:</span> <br></br>\r\n            <span style={{'font-size': '18px'}}>{direccion}</span></h3><br />\r\n            <h3 className=\"white\" >Referral link:</h3>\r\n            <h6 className=\"aboutus-area\" style={{'text-align': 'center', 'padding': '1.5em'}}><a href={link}>{link}</a><br />\r\n            <CopyToClipboard text={link}>\r\n              <button type=\"button\" className=\"primary-btn header-btn\">Copy to clipboard</button>\r\n            </CopyToClipboard>\r\n            </h6>\r\n            <hr></hr>\r\n            \r\n          </header>\r\n\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-4 single-services\">\r\n              <h4 className=\"pt-30 pb-20\">{invested} TRX</h4>\r\n              <p>\r\n                Total invested\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"col-sm-4 single-services\">\r\n              <h4 className=\"pt-30 pb-20\">{totalRef} TRX</h4>\r\n              <p>\r\n                Total earnings from referrals\r\n              \r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"col-sm-4 single-services\">\r\n              <h4 className=\"pt-30 pb-20\">{my} TRX</h4>\r\n              <p>\r\n                My balance\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"col-sm-4 single-services\">\r\n              <h4 className=\"pt-30 pb-20\">{balanceRef+my} TRX</h4>\r\n              <p>\r\n                Available\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"col-sm-4 single-services\">\r\n              <h4 className=\"pt-30 pb-20\">{withdrawn} TRX</h4>\r\n              <p>\r\n                withdrawn\r\n              \r\n              </p>\r\n            </div>\r\n                    \r\n          </div>\r\n        </div>  \r\n      </section>\r\n      \r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nexport default class TronLinkInfo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      accountAddress: \"Billetera NO conectada\",\r\n      accountBalance: \"Billetera NO conectada\",\r\n      accountBandwidth: \"Billetera NO conectada\"\r\n    };\r\n  };\r\n\r\n  \r\n  componentDidMount() {\r\n    setInterval(() => this.fetchAccountAddress(),1000);\r\n    setInterval(() => this.fetchAccountBalance(),1000);\r\n    setInterval(() => this.fetchAccountBandwidth(),1000);\r\n  };\r\n\r\n\r\n  async fetchAccountAddress() {\r\n    const account =  await window.tronWeb.trx.getAccount();\r\n    const accountAddress = account.address;\r\n    const accountAddressInBase58 = window.tronWeb.address.fromHex(\r\n      accountAddress\r\n    );\r\n\r\n    this.setState({\r\n      accountAddress: accountAddressInBase58\r\n    });\r\n  };\r\n\r\n  async fetchAccountBalance() {\r\n    const balanceInSun = await window.tronWeb.trx.getBalance(); //number\r\n    const balanceInTRX = window.tronWeb.fromSun(balanceInSun); //string\r\n    //const changeBackToSun = window.tronWeb.toSun(balanceInTRX); //string\r\n\r\n    this.setState({\r\n      //accountBalance: balanceInSun // Muestra el balance en SUN\r\n      accountBalance: balanceInTRX\r\n    });\r\n  };\r\n  //\r\n  // // La funcion aqui abajo muestra el ancho de banda como un numero\r\n  async fetchAccountBandwidth() {\r\n    const accountBandwidth = await window.tronWeb.trx.getBandwidth(); // number\r\n\r\n    this.setState({\r\n      accountBandwidth: accountBandwidth\r\n    });\r\n  };\r\n\r\n\r\n  render() {\r\n    const { accountAddress, accountBalance, accountBandwidth} = this.state;\r\n    return (\r\n\r\n\r\n          <div>\r\n            <h5 className=\"text-center\">Billetera Conectada</h5>\r\n            <h6 className=\"text-center\">\r\n              Direcci√≥n:<br></br>\r\n               <strong><span>{accountAddress}</span></strong><br></br><br></br>\r\n              Balance:<br></br>\r\n               <strong><span>{accountBalance} TRX</span></strong><br></br><br></br>\r\n              Bandwidth:<br></br>\r\n               <strong><span>{accountBandwidth}</span></strong><br></br>\r\n              \r\n            </h6>\r\n          </div>\r\n\r\n    \r\n    );\r\n  };\r\n}\r\n","import React from 'react';\r\n\r\nimport TronLinkLogo from './TronLinkLogo.png';\r\n\r\n\r\nconst WEBSTORE_URL = 'https://chrome.google.com/webstore/detail/ibnejdfjmmkpcnlpebklmnkoeoihofec/';\r\n\r\nconst logo = (\r\n    <div className='col-sm-4 text-center'>\r\n        <img src={ TronLinkLogo } className=\"img-fluid\" alt='TronLink logo' />\r\n    </div>\r\n);\r\n\r\nconst openTronLink = () => {\r\n    window.open(WEBSTORE_URL, '_blank');\r\n};\r\n\r\nconst TronLinkGuide = props => {\r\n    const {\r\n        installed = false\r\n    } = props;\r\n\r\n    if(!installed) {\r\n        return (\r\n            <div className='row' onClick={ openTronLink }>\r\n                <div className='col-sm-8'>\r\n                    <h1>TronLink Required</h1>\r\n                    <p>\r\n                        To create a post or tip others you must install TronLink. TronLink is a TRON wallet for the browser\r\n                        that can be <a href={ WEBSTORE_URL } target='_blank' rel='noopener noreferrer'>installed from the Chrome Webstore</a>.\r\n                        Once installed, return back and refresh the page.\r\n                    </p>\r\n                </div>\r\n                { logo }\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n    <>\r\n        <div className='tronLink row' onClick={ openTronLink } style={{'padding': '3em'}}>\r\n\r\n            <div className='info col-sm-8'>\r\n                <h1>Log in Required</h1>\r\n                <p>\r\n                    TronLink is installed but you must first log in. Open TronLink from the browser bar and set up your\r\n                    first wallet or decrypt a previously created wallet.\r\n                </p>\r\n            </div>\r\n            { logo }\r\n        </div> \r\n\r\n    </>\r\n    );\r\n};\r\n\r\nexport default TronLinkGuide;","import React, { Component } from \"react\";\r\nimport TronWeb from \"tronweb\";\r\n\r\nimport Utils from \"../../utils\";\r\nimport CrowdFunding from \"../CrowdFunding\";\r\nimport Datos from \"../Datos\";\r\nimport Oficina from \"../Oficina\";\r\nimport TronLinkInfo from \"../TronLinkInfo\";\r\nimport TronLinkGuide from \"../TronLinkGuide\";\r\n\r\n\r\nconst FOUNDATION_ADDRESS = \"TWiWt5SEDzaEqS6kE5gandWMNfxR2B5xzg\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      tronWeb: {\r\n        installed: false,\r\n        loggedIn: false\r\n      }\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await new Promise(resolve => {\r\n      const tronWebState = {\r\n        installed: !!window.tronWeb,\r\n        loggedIn: window.tronWeb && window.tronWeb.ready\r\n      };\r\n\r\n      if (tronWebState.installed) {\r\n        this.setState({\r\n          tronWeb: tronWebState\r\n        });\r\n\r\n        return resolve();\r\n      }\r\n\r\n      let tries = 0;\r\n\r\n      const timer = setInterval(() => {\r\n        if (tries >= 10) {\r\n\r\n          const TRONGRID_API = \"https://api.trongrid.io\";\r\n\r\n          window.tronWeb = new TronWeb(\r\n            TRONGRID_API,\r\n            TRONGRID_API,\r\n            TRONGRID_API\r\n          );\r\n\r\n          this.setState({\r\n            tronWeb: {\r\n              installed: false,\r\n              loggedIn: false\r\n            }\r\n          });\r\n          clearInterval(timer);\r\n          return resolve();\r\n        }\r\n\r\n        tronWebState.installed = !!window.tronWeb;\r\n        tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\r\n\r\n        if (!tronWebState.installed) {\r\n          return tries++;\r\n        }\r\n\r\n        this.setState({\r\n          tronWeb: tronWebState\r\n        });\r\n\r\n        resolve();\r\n      }, 100);\r\n    });\r\n\r\n    if (!this.state.tronWeb.loggedIn) {\r\n      // Set default address (foundation address) used for contract calls\r\n      // Directly overwrites the address object if TronLink disabled the\r\n      // function call\r\n      window.tronWeb.defaultAddress = {\r\n        hex: window.tronWeb.address.toHex(FOUNDATION_ADDRESS),\r\n        base58: FOUNDATION_ADDRESS\r\n      };\r\n\r\n      window.tronWeb.on(\"addressChange\", () => {\r\n        if (this.state.tronWeb.loggedIn) {\r\n          return;\r\n        }\r\n\r\n        this.setState({\r\n          tronWeb: {\r\n            installed: true,\r\n            loggedIn: true\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    Utils.setTronWeb(window.tronWeb);\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.tronWeb.installed) return (\r\n      <>\r\n        <div className=\"container\">\r\n          <TronLinkGuide />\r\n        </div>\r\n      </>\r\n      );\r\n\r\n    if (!this.state.tronWeb.loggedIn) return (\r\n      <>\r\n        <div className=\"container\">\r\n          <TronLinkGuide installed />\r\n        </div>\r\n      </>\r\n      );\r\n\r\n    return (\r\n\r\n      <>\r\n\r\n      <section className=\"convert-area\" id=\"convert\">\r\n        <div className=\"container\">\r\n          <div className=\"convert-wrap\">\r\n            <div className=\"row justify-content-center align-items-center flex-column pb-30\">\r\n              <h1 className=\"text-white\">Make your investment</h1>           \r\n            </div>\r\n            <div className=\"row justify-content-center align-items-start\">\r\n\r\n              <div className=\"col-lg-6 cols\">\r\n                <CrowdFunding />\r\n              </div>\r\n\r\n              <div className=\"col-lg-6 cols\">\r\n                <TronLinkInfo />\r\n              </div>              \r\n              \r\n            </div>            \r\n          </div>\r\n        </div>  \r\n      </section>\r\n\r\n      <Oficina />   \r\n\r\n      <Datos />    \r\n\r\n      </>\r\n    );\r\n\r\n  }\r\n}\r\nexport default App;\r\n\r\n// {tWeb()}\r\n\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./components/App\";\r\n\r\n\r\nvar root = document.getElementById(\"root\");\r\n\r\n\r\nReactDOM.render(<App />, root);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","module.exports = __webpack_public_path__ + \"static/media/TronLinkLogo.d3a8f115.png\";"],"sourceRoot":""}